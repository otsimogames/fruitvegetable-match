// Code generated by protoc-gen-js-fetch.
// DO NOT EDIT!

import fetch, { Headers, RequestInit, Request } from 'node-fetch';

export type ComponentSpecParent =  "APP"  | "GROUP" ;
export const ComponentSpecParent_APP: ComponentSpecParent = "APP";
export const ComponentSpecParent_GROUP: ComponentSpecParent = "GROUP";

/**
A label selector operator is the set of operators that can be used in
a label selector requirement.
*/
export type LabelSelectorOperator =  "In"  | "NotIn"  | "Exists"  | "DoesNotExist"  | "Gt"  | "Lt" ;
export const LabelSelectorOperator_In: LabelSelectorOperator = "In";
export const LabelSelectorOperator_NotIn: LabelSelectorOperator = "NotIn";
export const LabelSelectorOperator_Exists: LabelSelectorOperator = "Exists";
export const LabelSelectorOperator_DoesNotExist: LabelSelectorOperator = "DoesNotExist";
export const LabelSelectorOperator_Gt: LabelSelectorOperator = "Gt";
export const LabelSelectorOperator_Lt: LabelSelectorOperator = "Lt";

/**
TODO: improve Access Mode
*/
export type AccessMode =  "PUBLIC"  | "OWNER" ;
export const AccessMode_PUBLIC: AccessMode = "PUBLIC";
export const AccessMode_OWNER: AccessMode = "OWNER";

/**
ComponentType is enumeration for component type like image, audio
*/
export type ComponentType =  "TEXT"  | "IMAGE"  | "AUDIO"  | "COLOR"  | "NUMBER"  | "VIDEO"  | "FILE"  | "VECTOR_ARRAY"  | "DRAW_STEPS"  | "METADATA"  | "I18N" ;
export const ComponentType_TEXT: ComponentType = "TEXT";
export const ComponentType_IMAGE: ComponentType = "IMAGE";
export const ComponentType_AUDIO: ComponentType = "AUDIO";
export const ComponentType_COLOR: ComponentType = "COLOR";
export const ComponentType_NUMBER: ComponentType = "NUMBER";
export const ComponentType_VIDEO: ComponentType = "VIDEO";
export const ComponentType_FILE: ComponentType = "FILE";
export const ComponentType_VECTOR_ARRAY: ComponentType = "VECTOR_ARRAY";
export const ComponentType_DRAW_STEPS: ComponentType = "DRAW_STEPS";
export const ComponentType_METADATA: ComponentType = "METADATA";
export const ComponentType_I18N: ComponentType = "I18N";

/**
A label selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
*/
export class LabelSelectorRequirement {
/**
key is the label key that the selector applies to.
*/
  key: string;
/**
operator represents a key's relationship to a set of values.
Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
*/
  operator: LabelSelectorOperator;
/**
values is an array of string values. If the operator is In or NotIn,
the values array must be non-empty. If the operator is Exists or DoesNotExist,
the values array must be empty. If the operator is Gt or Lt, the values
array must have a single element, which will be interpreted as an integer.
*/
  values: string[];
}

/**
An empty label selector term matches all objects. A null label selector term
matches no objects.
*/
export class LabelSelectorTerm {
/**
expressions is a list of label selector requirements. The requirements are ANDed.
*/
  expressions: LabelSelectorRequirement[];
}

/**
A label selector represents the union of the results of one or more label queries
over a set of labels; that is, it represents the OR of the selectors represented
by the labelSelectorTerms.
*/
export class LabelSelector {
/**
terms is a list of label selector terms. The terms are ORed.
*/
  terms: LabelSelectorTerm[];
}

export class SimpleLabelSelector {
  matchLabels: { [key: string]: string };
		}

/**
Point is a 2D vector
*/
export class Point {
  x: number;
  y: number;
}

export class VectorArray {
  points: Point[];
}

export class DrawSteps {
  steps: VectorArray[];
}

export class AppMetadata {
/**
Visible Name
*/
  visibleName: string;
/**
Summary is summary of game
*/
  summary: string;
/**
Description
*/
  description: string;
/**
Logo is a rectangle image
*/
  logo: string;
/**
Icon is a square image
*/
  icon: string;
/**
Images are image files
*/
  images: string[];
/**
Keywords
*/
  keywords: string[];
/**
InfoSlug is the id of the content which describes how to play this game
*/
  infoSlug: string;
}

export class Component {
/**
ID is auto generated component uuid
*/
  id: string;
/**
Description of this component.
*/
  description: string;
/**
Type is component type
*/
  type: ComponentType;
/**
Key is the key for material, like 'letter_audio' for drawing game.
This field is not unique, there could be more than one component with same key.
If there is more than one key than game will choose one of them randomly.
*/
  key: string;
/**
component value
*/
  value: ComponentValue;
/**
Locales are the locales that supports this component, like 'en','tr' or country
spesific 'en-GB' 'en-US'. If this is empty which means supports all locales.
if the value type is i18n then this locales should come from i18n service.
*/
  locales: string[];
/**
Labels for querying components
*/
  labels: { [key: string]: string };
		/**
TODO: AccessMode is determines whether is public or not.
*/
  accessMode: AccessMode;
/**
CreatedBy is the owner of this component. If a material is public then users can
add private components for themselves
*/
  createdBy: string;
/**
Is this component disabled
*/
  disabled: boolean;
  createdAt: string|number;
  updatedAt: string|number;
/**
Version is component version that will increase on each update
*/
  version: string|number;
}

export class ComponentValue {
  str: string;
  number: number;
  url: string;
  vector: VectorArray;
  steps: DrawSteps;
  metadata: AppMetadata;
}

export class Material {
/**
ID of the material
*/
  id: string;
/**
Name of the material
*/
  name: string;
/**
Description is explains what is this material and what for
*/
  description: string;
/**
Labels of the material for querying
*/
  labels: { [key: string]: string };
		/**
List of components of this material
*/
  components: Component[];
/**
TODO: Version is material version that will increase on each update
*/
  version: string|number;
/**
AccessMode is the access mode of this material. Users can add materials for themself as private or public.
If it is than anyone can add new components. ??What happens if a public material goes to private or disabled.
?? Other component owners situations in that case
*/
  accessMode: AccessMode;
/**
CreatedBy is the owner of this material
*/
  createdBy: string;
  disabled: boolean;
  createdAt: string|number;
  updatedAt: string|number;
}

/**
FileAsset is an asset like audio and image which we will store at our cloud storage
*/
export class FileAsset {
/**
ID is asset id
*/
  id: string;
/**
Url is publicly accessible url
*/
  url: string;
/**
Name of the asset
*/
  name: string;
/**
Keywords of the asset, will use for search
*/
  keywords: string[];
}

/**
ComponentSpec defines
*/
export class ComponentSpec {
/**
Key is the required component key and it is unique for material spec
*/
  key: string;
/**
Type is required component type
*/
  type: ComponentType;
/**
IsAdvanced is boolean for whether this component is advanced or not
*/
  isAdvanced: boolean;
/**
Parent is the owner of this component spec
*/
  parent: ComponentSpecParent;
  simple: SimpleLabelSelector;
  advanced: LabelSelector;
/**
Component description to end user
*/
  description: string;
}

export class LabelSelectorSerializor {
  simple: SimpleLabelSelector;
  advanced: LabelSelector;
}

export class MaterialSelectGroup {
  groupName: string;
/**
Component specifications of the material group
i.e. what's needed to form items, numbers, colors etc
*/
  componentSpecs: ComponentSpec[];
}

/**
AppSpec defines an app like Match Game, Choose Game or Drawing Game
*/
export class AppSpec {
  id: string;
  name: string;
  repository: string;
/**
Command is the the docker image of the app
*/
  command: string;
/**
Env is runtime env of command script
*/
  env: string[];
/**
Components are the array of component specs for the app itself
This does not include the specs for material groups
*/
  components: ComponentSpec[];
/**
Selects is an array of component_specs for
every individual material group in this app
*/
  selects: MaterialSelectGroup[];
/**
CreatedBy is the owner of this AppSpec
*/
  createdBy: string;
  disabled: boolean;
  createdAt: string|number;
  updatedAt: string|number;
}

export class AppMaterialGroup {
  groupName: string;
  materialIds: string[];
  specGroup: string;
}

export class AppMaterialGroupSerializor {
  appMaterialGroups: AppMaterialGroup[];
}

/**
App is an app like 'Color Match Game' based on 'Match Game Spec'
*/
export class App {
/**
ID of the App
*/
  id: string;
/**
Spec is the app's spec
*/
  spec: string;
/**
Name of the App
*/
  name: string;
/**
Components is list of components that compatible with appSpec's components definition
*/
  components: Component[];
/**
MaterialIDs is ids of the material that are compatible with appSpec Definition
*/
  materialGroups: AppMaterialGroup[];
/**
Env is appends to AppSpec.env
*/
  env: string[];
/**
CreatedBy is the owner of this material
*/
  createdBy: string;
  disabled: boolean;
  createdAt: string|number;
  updatedAt: string|number;
  labels: { [key: string]: string };
		  buildVersion: string;
}

