// Code generated by protoc-gen-js-fetch.
// DO NOT EDIT!
import fetch, { Headers, RequestInit, Request } from 'node-fetch';

import * as otsimo_asset from "./asset.pb";

export type QueryComponentSpecFilterParent = "ALL" | "ONLY_APP" | "ONLY_GROUP";
export const QueryComponentSpecFilterParent_ALL: QueryComponentSpecFilterParent = "ALL";
export const QueryComponentSpecFilterParent_ONLY_APP: QueryComponentSpecFilterParent = "ONLY_APP";
export const QueryComponentSpecFilterParent_ONLY_GROUP: QueryComponentSpecFilterParent = "ONLY_GROUP";

export class Empty {
}

export class IDRequest {
	id: string;
}

export class IDResponse {
	id: string;
}

export class QueryMaterial {
	labelSelector: { [key: string]: string };
	onlyMine: boolean;
	showDisabled: boolean;
}

export class FieldMask {
	/**
	The set of field mask paths.
	*/
	paths: string[];
}

export class UpdateMaterialRequest {
	material: otsimo_asset.Material;
	fieldMask: FieldMask;
}

export class UpdateComponentRequest {
	component: otsimo_asset.Component;
	fieldMask: FieldMask;
}

export class UpdateAppRequest {
	app: otsimo_asset.App;
	fieldMask: FieldMask;
}

export class UpdateAppSpecRequest {
	appSpec: otsimo_asset.AppSpec;
	fieldMask: FieldMask;
}

export class UpdateComponentSpecRequest {
	appSpecId: string;
	componentSpec: otsimo_asset.ComponentSpec;
	fieldMask: FieldMask;
	groupName: string;
}

export class MaterialList {
	ids: string[];
	idAndVersion: { [key: string]: string | number };
}

export class LocaleList {
	locales: string[];
}

export class MaterialsWithLocales {
	materials: { [key: string]: LocaleList };
}

export class AddComponentRequest {
	materialId: string;
	component: otsimo_asset.Component;
	appId: string;
}

export class ComponentIDRequest {
	materialId: string;
	id: string;
}

export class ComponentList {
	components: otsimo_asset.Component[];
}

export class PreviewAppResponse {
	id: string;
	url: string;
}

export class QueryAppSpec {
	onlyMine: boolean;
	showDisabled: boolean;
}

export class AppSpecList {
	specs: otsimo_asset.AppSpec[];
}

export class ComponentSpecRequest {
	appSpecId: string;
	componentSpec: otsimo_asset.ComponentSpec;
	groupName: string;
}

export class RemoveComponentSpecRequest {
	appSpecId: string;
	componentSpecKey: string;
	groupName: string;
}

export class QueryComponentSpec {
	appSpecId: string;
	parent: QueryComponentSpecFilterParent;
	groupName: string;
}

export class ComponentSpecList {
	appSpecId: string;
	specs: otsimo_asset.ComponentSpec[];
}

export class MaterialSpec {
	simple: otsimo_asset.SimpleLabelSelector;
	advanced: otsimo_asset.LabelSelector;
	componentSpecs: otsimo_asset.ComponentSpec[];
	ignoreComponentSpec: boolean;
}

export class QueryApp {
	onlyMine: boolean;
	showDisabled: boolean;
}

export class AppList {
	apps: otsimo_asset.App[];
}

export class BuilderRequest {
	id: string;
	languages: string[];
	deployType: string;
}

export class CompileAppResponse {
	/**
	build_id of the serialized game_build object on the cloud
	*/
	id: string;
	/**
	Cloud bucket name
	*/
	bucket: string;
	/**
	Folder inside the cloud's bucket
	*/
	folder: string;
}

export class BuilderService {
	private host: string;
	private headerEditors: any[] = [];
	/**
	 * @param {string} url the service host url
	 */
	constructor(url: string) {
		this.host = url;
		this.headerEditors = [];
	}

	addHeaderEditor(m: any) {
		this.headerEditors.push(m)
	}
	/**
	Compile the Application
	*/

	async compileApp(builderRequest: BuilderRequest): Promise<CompileAppResponse> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(builderRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/builder/compile/${builderRequest.id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async previewApp(builderRequest: BuilderRequest): Promise<PreviewAppResponse> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(builderRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/builder/preview/${builderRequest.id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

}
export class AssetService {
	private host: string;
	private headerEditors: any[] = [];
	/**
	 * @param {string} url the service host url
	 */
	constructor(url: string) {
		this.host = url;
		this.headerEditors = [];
	}

	addHeaderEditor(m: any) {
		this.headerEditors.push(m)
	}
	/**
	Create given material, returns newly created material's id
	*/

	async putMaterial(material: otsimo_asset.Material): Promise<IDResponse> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(material),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
Update material
*/

	async updateMaterial(updateMaterialRequest: UpdateMaterialRequest): Promise<otsimo_asset.Material> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(updateMaterialRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
Get the material from id
*/

	async getMaterial(id: string): Promise<otsimo_asset.Material> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'GET',
			headers: _headers,
			body: undefined,
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material/${id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
List all material' ids that match with the query
*/

	async listMaterial(queryMaterial: QueryMaterial): Promise<MaterialList> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(queryMaterial),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material/list`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
List materials with material spec, useful for listing materials for an app
*/

	async listByMaterialSpec(materialSpec: MaterialSpec): Promise<MaterialsWithLocales> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(materialSpec),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material/listBySpec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
Get all components of the materials
*/

	async getComponentsOfMaterial(id: string): Promise<ComponentList> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'GET',
			headers: _headers,
			body: undefined,
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material/${id}/components`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async getComponentOfMaterial(materialId: string, id: string): Promise<otsimo_asset.Component> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'GET',
			headers: _headers,
			body: undefined,
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/material/${materialId}/component/${id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async getComponent(id: string): Promise<otsimo_asset.Component> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'GET',
			headers: _headers,
			body: undefined,
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/component/${id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async addComponent(addComponentRequest: AddComponentRequest): Promise<IDResponse> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(addComponentRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/component`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async updateComponent(updateComponentRequest: UpdateComponentRequest): Promise<otsimo_asset.Component> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(updateComponentRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/component`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
App Api
*/

	async putApp(app: otsimo_asset.App): Promise<IDResponse> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(app),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/app`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async updateApp(updateAppRequest: UpdateAppRequest): Promise<otsimo_asset.App> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(updateAppRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/app`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async getApp(id: string): Promise<otsimo_asset.App> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'GET',
			headers: _headers,
			body: undefined,
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/app/${id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async listApp(queryApp: QueryApp): Promise<AppList> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(queryApp),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/app/list`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	/**
AppSpec Api
*/

	async putAppSpec(appSpec: otsimo_asset.AppSpec): Promise<IDResponse> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(appSpec),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async updateAppSpec(updateAppSpecRequest: UpdateAppSpecRequest): Promise<otsimo_asset.AppSpec> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(updateAppSpecRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async getAppSpec(id: string): Promise<otsimo_asset.AppSpec> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'GET',
			headers: _headers,
			body: undefined,
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec/${id}`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

	async listAppSpec(queryAppSpec: QueryAppSpec): Promise<AppSpecList> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'POST',
			headers: _headers,
			body: JSON.stringify(queryAppSpec),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec/list`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async addComponentSpec(componentSpecRequest: ComponentSpecRequest): Promise<Empty> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(componentSpecRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec/addComponentSpec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async removeComponentSpec(removeComponentSpecRequest: RemoveComponentSpecRequest): Promise<Empty> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(removeComponentSpecRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec/removeComponentSpec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async updateComponentSpec(updateComponentSpecRequest: UpdateComponentSpecRequest): Promise<otsimo_asset.ComponentSpec> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(updateComponentSpecRequest),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec/updateComponentSpec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}


	async listComponentSpecs(queryComponentSpec: QueryComponentSpec): Promise<ComponentSpecList> {
		const _headers = new Headers();
		_headers.append("Content-Type", "application/json");
		for (let i = 0; i < this.headerEditors.length; ++i) {
			this.headerEditors[i].edit(_headers);
		}
		const _init = {
			method: 'PUT',
			headers: _headers,
			body: JSON.stringify(queryComponentSpec),
		} as RequestInit;

		const _req = new Request(`${this.host}/api/v1/asset/appspec/listComponentSpec`, _init);
		try {
			const resp = await fetch(_req);
			if (resp.status !== 200) {
				const rj = await resp.json();
				return Promise.reject(rj);
			}
			return resp.json();
		} catch (err) {
			return Promise.reject(err);
		}
	}

}
