// Code generated by protoc-gen-js-fetch.
// DO NOT EDIT!

import fetch, { Headers, RequestInit, Request } from 'node-fetch';

/**
A label selector operator is the set of operators that can be used in
a label selector requirement.
*/
export type LabelSelectorOperator = "In" | "NotIn" | "Exists" | "DoesNotExist" | "Gt" | "Lt";
export const LabelSelectorOperator_In: LabelSelectorOperator = "In";
export const LabelSelectorOperator_NotIn: LabelSelectorOperator = "NotIn";
export const LabelSelectorOperator_Exists: LabelSelectorOperator = "Exists";
export const LabelSelectorOperator_DoesNotExist: LabelSelectorOperator = "DoesNotExist";
export const LabelSelectorOperator_Gt: LabelSelectorOperator = "Gt";
export const LabelSelectorOperator_Lt: LabelSelectorOperator = "Lt";

/**
A label selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
*/
export class LabelSelectorRequirement {
  /**
  key is the label key that the selector applies to.
  */
  key: string;
  /**
  operator represents a key's relationship to a set of values.
  Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
  */
  operator: LabelSelectorOperator;
  /**
  values is an array of string values. If the operator is In or NotIn,
  the values array must be non-empty. If the operator is Exists or DoesNotExist,
  the values array must be empty. If the operator is Gt or Lt, the values
  array must have a single element, which will be interpreted as an integer.
  */
  values: string[];
}

/**
An empty label selector term matches all objects. A null label selector term
matches no objects.
*/
export class LabelSelectorTerm {
  /**
  expressions is a list of label selector requirements. The requirements are ANDed.
  */
  expressions: LabelSelectorRequirement[];
}

/**
A label selector represents the union of the results of one or more label queries
over a set of labels; that is, it represents the OR of the selectors represented
by the labelSelectorTerms.
*/
export class LabelSelector {
  /**
  terms is a list of label selector terms. The terms are ORed.
  */
  terms: LabelSelectorTerm[];
}

